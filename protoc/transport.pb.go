// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transport.proto

package transport

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UploadFileReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	File                 []byte   `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadFileReq) Reset()         { *m = UploadFileReq{} }
func (m *UploadFileReq) String() string { return proto.CompactTextString(m) }
func (*UploadFileReq) ProtoMessage()    {}
func (*UploadFileReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{0}
}

func (m *UploadFileReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadFileReq.Unmarshal(m, b)
}
func (m *UploadFileReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadFileReq.Marshal(b, m, deterministic)
}
func (m *UploadFileReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileReq.Merge(m, src)
}
func (m *UploadFileReq) XXX_Size() int {
	return xxx_messageInfo_UploadFileReq.Size(m)
}
func (m *UploadFileReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileReq.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileReq proto.InternalMessageInfo

func (m *UploadFileReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UploadFileReq) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

type UploadFileResp struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadFileResp) Reset()         { *m = UploadFileResp{} }
func (m *UploadFileResp) String() string { return proto.CompactTextString(m) }
func (*UploadFileResp) ProtoMessage()    {}
func (*UploadFileResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{1}
}

func (m *UploadFileResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadFileResp.Unmarshal(m, b)
}
func (m *UploadFileResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadFileResp.Marshal(b, m, deterministic)
}
func (m *UploadFileResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileResp.Merge(m, src)
}
func (m *UploadFileResp) XXX_Size() int {
	return xxx_messageInfo_UploadFileResp.Size(m)
}
func (m *UploadFileResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileResp.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileResp proto.InternalMessageInfo

func (m *UploadFileResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*UploadFileReq)(nil), "transport.UploadFileReq")
	proto.RegisterType((*UploadFileResp)(nil), "transport.UploadFileResp")
}

func init() {
	proto.RegisterFile("transport.proto", fileDescriptor_a97e32c760ec1b28)
}

var fileDescriptor_a97e32c760ec1b28 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x29, 0x4a, 0xcc,
	0x2b, 0x2e, 0xc8, 0x2f, 0x2a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0x99, 0x73, 0xf1, 0x86, 0x16, 0xe4, 0xe4, 0x27, 0xa6, 0xb8, 0x65, 0xe6, 0xa4, 0x06, 0xa5, 0x16,
	0x0a, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81,
	0xd9, 0x20, 0xb1, 0xb4, 0xcc, 0x9c, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x30, 0x5b,
	0x49, 0x8b, 0x8b, 0x0f, 0x59, 0x63, 0x71, 0x81, 0x90, 0x04, 0x17, 0x7b, 0x6e, 0x6a, 0x71, 0x71,
	0x62, 0x3a, 0x4c, 0x33, 0x8c, 0x6b, 0x14, 0xc8, 0xc5, 0x06, 0x51, 0x2b, 0xe4, 0xce, 0xc5, 0x85,
	0xd0, 0x25, 0x24, 0xa1, 0x87, 0x70, 0x19, 0x8a, 0x2b, 0xa4, 0x24, 0x71, 0xc8, 0x14, 0x17, 0x28,
	0x31, 0x68, 0x30, 0x1a, 0x30, 0x26, 0xb1, 0x81, 0x7d, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0xc1, 0xf2, 0xe2, 0x99, 0xdc, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UploadClient is the client API for Upload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UploadClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (Upload_UploadFileClient, error)
}

type uploadClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadClient(cc grpc.ClientConnInterface) UploadClient {
	return &uploadClient{cc}
}

func (c *uploadClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (Upload_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Upload_serviceDesc.Streams[0], "/transport.Upload/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &uploadUploadFileClient{stream}
	return x, nil
}

type Upload_UploadFileClient interface {
	Send(*UploadFileReq) error
	Recv() (*UploadFileResp, error)
	grpc.ClientStream
}

type uploadUploadFileClient struct {
	grpc.ClientStream
}

func (x *uploadUploadFileClient) Send(m *UploadFileReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uploadUploadFileClient) Recv() (*UploadFileResp, error) {
	m := new(UploadFileResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UploadServer is the server API for Upload service.
type UploadServer interface {
	UploadFile(Upload_UploadFileServer) error
}

// UnimplementedUploadServer can be embedded to have forward compatible implementations.
type UnimplementedUploadServer struct {
}

func (*UnimplementedUploadServer) UploadFile(srv Upload_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}

func RegisterUploadServer(s *grpc.Server, srv UploadServer) {
	s.RegisterService(&_Upload_serviceDesc, srv)
}

func _Upload_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploadServer).UploadFile(&uploadUploadFileServer{stream})
}

type Upload_UploadFileServer interface {
	Send(*UploadFileResp) error
	Recv() (*UploadFileReq, error)
	grpc.ServerStream
}

type uploadUploadFileServer struct {
	grpc.ServerStream
}

func (x *uploadUploadFileServer) Send(m *UploadFileResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uploadUploadFileServer) Recv() (*UploadFileReq, error) {
	m := new(UploadFileReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Upload_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transport.Upload",
	HandlerType: (*UploadServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _Upload_UploadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transport.proto",
}
